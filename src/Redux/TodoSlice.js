import { createSlice } from "@reduxjs/toolkit";

// Create a slice of the Redux state for todos
const todoSlice = createSlice({
    name: 'todos', // Name of the slice
    initialState: [], // Initial state for the todos

    reducers: {
        
        // Reducer to add a new todo item
        addTodo: (state, action) => {
            const newTodo = {
                id: Date.now(), // Generate a unique ID based on the current timestamp
                title: action.payload.title, // Title of the new todo item
                completed: false, // New todos are initially not completed
            };
            state.push(newTodo); // Add the new todo item to the state
        },

        // Reducer to change the completion state of a todo item
        changeState: (state, action) => {
            const index = state.findIndex((todo) => todo.id === action.payload.id); // Find the index of the todo item to update
            state[index].completed = action.payload.completed; // Update the completion state
        },

        // Reducer to delete a todo item
        deleteTodo: (state, action) => {
            return state.filter((todo) => todo.id !== action.payload.id); // Remove the todo item with the specified ID from the state
        },

        // Reducer to edit the title of a todo item
        editTodo: (state, action) => {
            const index = state.findIndex((todo) => todo.id === action.payload.id); // Find the index of the todo item to update
            state[index].title = action.payload.title; // Update the title
        },

        // Reducer to reorder the todo items
        reorderTodo: (state, action) => {
            return action.payload.items; // Return the reordered list of todo items
        }
    }
})

// Export the action creators generated by createSlice
export const {
    addTodo,
    changeState,
    deleteTodo,
    editTodo,
    reorderTodo
} = todoSlice.actions;

// Export the reducer to be used in the Redux store
export default todoSlice.reducer;
